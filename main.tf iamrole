resource "aws_iam_role" "this" {
  name = "${var.owner}-${var.environment}-${var.project}-${var.name_short}-role-${var.aws_region}"
  path = var.role_path
  permissions_boundary = var.permissions_boundary != "" ? var.permissions_boundary : null

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = { Federated = var.oidc_provider_arn }
      Action = "sts:AssumeRoleWithWebIdentity"
      Condition = {
        StringEquals = {
          "${var.oidc_provider_url}:sub" = "system:serviceaccount:${var.k8s_namespace}:${var.service_account_name}"
        }
      }
    }]
  })

  tags = var.tags
}

locals {
  s3_bucket_arns = [for b in var.s3_buckets : "arn:aws:s3:::${b}"]

  s3_object_arns = [for b in var.s3_buckets : "arn:aws:s3:::${b}/*"]

  eso_prefix_arns = [
    for p in var.eso_secret_name_prefixes :
    "arn:aws:secretsmanager:${var.aws_region}:${var.account_id}:secret:${p}*"
  ]

  eso_resources = length(var.eso_explicit_secret_arns) > 0
    ? var.eso_explicit_secret_arns
    : local.eso_prefix_arns

  candidate_policy_docs = {
    eso = data.aws_iam_policy_document.eso.json
    s3 = data.aws_iam_policy_document.s3.json
    msk = data.aws_iam_policy_document.msk.json
  }

  inline_policy_jsons = {
    for k, v in local.candidate_policy_docs :
    k => v if contains(var.selected_policies, k)
  }
}

data "aws_iam_policy_document" "eso" {
  statement {
    sid = "EsoSecretsCore"
    effect = "Allow"
    actions = [
      "secretsmanager:GetSecretValue",
      "secretsmanager:DescribeSecret",
      "secretsmanager:ListSecretVersionIds"
    ]
    resources = local.eso_resources
  }

  dynamic "statement" {
    for_each = var.eso_allow_list_secrets ? [1] : []
    content {
      sid = "EsoListSecrets"
      effect = "Allow"
      actions = ["secretsmanager:ListSecrets"]
      resources = ["*"]
    }
  }

  dynamic "statement" {
    for_each = length(var.eso_kms_key_arns) > 0 ? [1] : []
    content {
      sid = "EsoKmsDecrypt"
      effect = "Allow"
      actions = ["kms:Decrypt"]
      resources = var.eso_kms_key_arns
    }
  }

  statement {
    sid = "EsoLogsCreateGroup"
    effect = "Allow"
    actions = ["logs:CreateLogGroup"]
    resources = ["arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:*"]
  }

  statement {
    sid = "EsoLogsWrite"
    effect = "Allow"
    actions = ["logs:CreateLogStream", "logs:PutLogEvents"]
    resources = ["arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:*"]
  }
}

data "aws_iam_policy_document" "s3" {
  dynamic "statement" {
    for_each = length(local.s3_bucket_arns) > 0 ? [1] : []
    content {
      sid = "S3ListBucket"
      effect = "Allow"
      actions = ["s3:ListBucket"]
      resources = local.s3_bucket_arns
    }
  }

  dynamic "statement" {
    for_each = length(local.s3_object_arns) > 0 ? [1] : []
    content {
      sid = "S3ObjectRW"
      effect = "Allow"
      actions = ["s3:GetObject", "s3:PutObject", "s3:PutObjectAcl"]
      resources = local.s3_object_arns
    }
  }

  statement {
    sid = "S3LogsCreateGroup"
    effect = "Allow"
    actions = ["logs:CreateLogGroup"]
    resources = ["arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:*"]
  }

  statement {
    sid = "S3LogsWrite"
    effect = "Allow"
    actions = ["logs:CreateLogStream", "logs:PutLogEvents"]
    resources = ["arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:*"]
  }
}

data "aws_iam_policy_document" "msk" {
  dynamic "statement" {
    for_each = var.msk_cluster_arn != "" ? [1] : []
    content {
      sid = "MskControlPlane"
      effect = "Allow"
      actions = [
        "kafka:DescribeCluster",
        "kafka:DescribeClusterV2",
        "kafka:GetBootstrapBrokers"
      ]
      resources = [var.msk_cluster_arn]
    }
  }

  dynamic "statement" {
    for_each = var.msk_cluster_arn != "" ? [1] : []
    content {
      sid = "MskDataPlane"
      effect = "Allow"
      actions = [
        "kafka-cluster:Connect",
        "kafka-cluster:DescribeClusterDynamicConfiguration",
        "kafka-cluster:DescribeTopic",
        "kafka-cluster:DescribeGroup",
        "kafka-cluster:ReadData",
        "kafka-cluster:AlterGroup"
      ]
      resources = [
        var.msk_cluster_arn,
        "${replace(var.msk_cluster_arn, "cluster/", "topic/")}/*",
        "${replace(var.msk_cluster_arn, "cluster/", "group/")}/*"
      ]
    }
  }

  statement {
    sid = "MskLogsCreateGroup"
    effect = "Allow"
    actions = ["logs:CreateLogGroup"]
    resources = ["arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:*"]
  }

  statement {
    sid = "MskLogsWrite"
    effect = "Allow"
    actions = ["logs:CreateLogStream", "logs:PutLogEvents"]
    resources = ["arn:aws:logs:${var.aws_region}:${var.account_id}:log-group:*"]
  }
}

resource "aws_iam_role_policy" "inline" {
  for_each = local.inline_policy_jsons
  name = "${var.owner}-${var.environment}-${var.project}-${var.name_short}-${each.key}-inline-${var.aws_region}"
  role = aws_iam_role.this.id
  policy = each.value
}
